#!/usr/bin/env run-cargo-script

// for read and write
// use std::fs::File;
// use std::io::{self, prelude::*, BufReader};
// use std::path::Path;

// for args
use std::env;


fn main() -> std::io::Result<()> {
    let args: Vec<String> = env::args().collect();

    let hist_sim_outfile = &args[1];
    // let stepTimeFile = &args[2];

    let mut reader1 = my_reader::BufReader::open(hist_sim_outfile)?;
    let mut buffer1 = String::new();

    // let mut reader2 = my_reader::BufReader::open(stepTimeFile)?;
    // let mut buffer2 = String::new();


    let mut step_index: u128 = 0;

        // Consumes the iterator, returns an (Optional) String
        while let Some(line1) = reader1.read_line(&mut buffer1){

            // let line2 = reader2.read_line(&mut buffer2);
            // let time_step: u128 = 0;

            let mut unmodified_nuc_amount = 0;
            let mut activated_nuc_amount = 0;
            let mut silenced_nuc_amount = 0;
            let mut bivalent_nuc_amount = 0;
            for num in line1.unwrap().chars(){

                if num == '\n' {
                    continue;
                }

                let nucleosome_case_number: u8 = num as u8 - '0' as u8;

                if nucleosome_case_number == 1 as u8 {
                    unmodified_nuc_amount += 1;
                } else if nucleosome_case_number == 2 as u8 {
                    activated_nuc_amount += 1;
                } else if nucleosome_case_number == 3 as u8 {
                    silenced_nuc_amount += 1;
                } else {
                    // println!("{}", nucleosome_case_number.to_string());
                    bivalent_nuc_amount += 1;
                }
            }
            let total = unmodified_nuc_amount + activated_nuc_amount + silenced_nuc_amount + bivalent_nuc_amount;
            let csv_line = format!("{}\t{}\t{}\t{}\t{}",
                step_index.to_string(),
                // timeStep.trim(),
                activated_nuc_amount.to_string(),
                silenced_nuc_amount.to_string(),
                bivalent_nuc_amount.to_string(),
                total.to_string()
            );


            println!("{}", csv_line);
            step_index += 1;
        }

        Ok(())

}

mod my_reader {
    use std::{
        fs::File,
        io::{self, prelude::*},
    };

    pub struct BufReader {
        reader: io::BufReader<File>,
    }

    impl BufReader {
        pub fn open(path: impl AsRef<std::path::Path>) -> io::Result<Self> {
            let file = File::open(path)?;
            let reader = io::BufReader::new(file);

            Ok(Self { reader })
        }

        pub fn read_line<'buf>(
            &mut self,
            buffer: &'buf mut String,
        ) -> Option<io::Result<&'buf mut String>> {
            buffer.clear();

            self.reader
                .read_line(buffer)
                .map(|u| if u == 0 { None } else { Some(buffer) })
                .transpose()
        }
    }
}

// The output is wrapped in a Result to allow matching on errors
// Returns an Iterator to the Reader of the lines of the file.
// fn read_lines<P>(histSimOutfile: P) -> io::Result<io::Lines<io::BufReader<File>>>
// where P: AsRef<Path>, {
//     let file = File::open(histSimOutfile)?;
//     Ok(io::BufReader::new(file).lines())
// }